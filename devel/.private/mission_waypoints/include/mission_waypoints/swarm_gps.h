// Generated by gencpp from file mission_waypoints/swarm_gps.msg
// DO NOT EDIT!


#ifndef MISSION_WAYPOINTS_MESSAGE_SWARM_GPS_H
#define MISSION_WAYPOINTS_MESSAGE_SWARM_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace mission_waypoints
{
template <class ContainerAllocator>
struct swarm_gps_
{
  typedef swarm_gps_<ContainerAllocator> Type;

  swarm_gps_()
    : pos()
    , vel()
    , name()  {
    }
  swarm_gps_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , vel(_alloc)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::mission_waypoints::swarm_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mission_waypoints::swarm_gps_<ContainerAllocator> const> ConstPtr;

}; // struct swarm_gps_

typedef ::mission_waypoints::swarm_gps_<std::allocator<void> > swarm_gps;

typedef boost::shared_ptr< ::mission_waypoints::swarm_gps > swarm_gpsPtr;
typedef boost::shared_ptr< ::mission_waypoints::swarm_gps const> swarm_gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mission_waypoints::swarm_gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mission_waypoints::swarm_gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mission_waypoints::swarm_gps_<ContainerAllocator1> & lhs, const ::mission_waypoints::swarm_gps_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mission_waypoints::swarm_gps_<ContainerAllocator1> & lhs, const ::mission_waypoints::swarm_gps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mission_waypoints

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_waypoints::swarm_gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mission_waypoints::swarm_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_waypoints::swarm_gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16e62204318dc775aab86123a92688f3";
  }

  static const char* value(const ::mission_waypoints::swarm_gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16e62204318dc775ULL;
  static const uint64_t static_value2 = 0xaab86123a92688f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mission_waypoints/swarm_gps";
  }

  static const char* value(const ::mission_waypoints::swarm_gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 pos\n"
"geometry_msgs/Vector3 vel\n"
"string name\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mission_waypoints::swarm_gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct swarm_gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mission_waypoints::swarm_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mission_waypoints::swarm_gps_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MISSION_WAYPOINTS_MESSAGE_SWARM_GPS_H
