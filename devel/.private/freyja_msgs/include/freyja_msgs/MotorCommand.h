// Generated by gencpp from file freyja_msgs/MotorCommand.msg
// DO NOT EDIT!


#ifndef FREYJA_MSGS_MESSAGE_MOTORCOMMAND_H
#define FREYJA_MSGS_MESSAGE_MOTORCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace freyja_msgs
{
template <class ContainerAllocator>
struct MotorCommand_
{
  typedef MotorCommand_<ContainerAllocator> Type;

  MotorCommand_()
    : motors_state(0)
    , motors_idle(0)  {
    }
  MotorCommand_(const ContainerAllocator& _alloc)
    : motors_state(0)
    , motors_idle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _motors_state_type;
  _motors_state_type motors_state;

   typedef uint8_t _motors_idle_type;
  _motors_idle_type motors_idle;





  typedef boost::shared_ptr< ::freyja_msgs::MotorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freyja_msgs::MotorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCommand_

typedef ::freyja_msgs::MotorCommand_<std::allocator<void> > MotorCommand;

typedef boost::shared_ptr< ::freyja_msgs::MotorCommand > MotorCommandPtr;
typedef boost::shared_ptr< ::freyja_msgs::MotorCommand const> MotorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freyja_msgs::MotorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freyja_msgs::MotorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freyja_msgs::MotorCommand_<ContainerAllocator1> & lhs, const ::freyja_msgs::MotorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.motors_state == rhs.motors_state &&
    lhs.motors_idle == rhs.motors_idle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freyja_msgs::MotorCommand_<ContainerAllocator1> & lhs, const ::freyja_msgs::MotorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freyja_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::MotorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::MotorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::MotorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47aca326185da674507cd7254ba460ca";
  }

  static const char* value(const ::freyja_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47aca326185da674ULL;
  static const uint64_t static_value2 = 0x507cd7254ba460caULL;
};

template<class ContainerAllocator>
struct DataType< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freyja_msgs/MotorCommand";
  }

  static const char* value(const ::freyja_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# command asctec vehicle to do discrete things\n"
"## motors_state : on(1) or off(0)\n"
"## motors_idle   : (1) forces the motor to idle, (0) does nothing\n"
"uint8 motors_state\n"
"uint8 motors_idle\n"
;
  }

  static const char* value(const ::freyja_msgs::MotorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motors_state);
      stream.next(m.motors_idle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freyja_msgs::MotorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freyja_msgs::MotorCommand_<ContainerAllocator>& v)
  {
    s << indent << "motors_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motors_state);
    s << indent << "motors_idle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motors_idle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREYJA_MSGS_MESSAGE_MOTORCOMMAND_H
