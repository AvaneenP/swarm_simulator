// Generated by gencpp from file freyja_msgs/ControllerDebug.msg
// DO NOT EDIT!


#ifndef FREYJA_MSGS_MESSAGE_CONTROLLERDEBUG_H
#define FREYJA_MSGS_MESSAGE_CONTROLLERDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace freyja_msgs
{
template <class ContainerAllocator>
struct ControllerDebug_
{
  typedef ControllerDebug_<ContainerAllocator> Type;

  ControllerDebug_()
    : header()
    , lqr_u()
    , thrust(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , state_valid(0)  {
      lqr_u.assign(0.0);
  }
  ControllerDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lqr_u()
    , thrust(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , state_valid(0)  {
  (void)_alloc;
      lqr_u.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 4>  _lqr_u_type;
  _lqr_u_type lqr_u;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _state_valid_type;
  _state_valid_type state_valid;





  typedef boost::shared_ptr< ::freyja_msgs::ControllerDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freyja_msgs::ControllerDebug_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerDebug_

typedef ::freyja_msgs::ControllerDebug_<std::allocator<void> > ControllerDebug;

typedef boost::shared_ptr< ::freyja_msgs::ControllerDebug > ControllerDebugPtr;
typedef boost::shared_ptr< ::freyja_msgs::ControllerDebug const> ControllerDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freyja_msgs::ControllerDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freyja_msgs::ControllerDebug_<ContainerAllocator1> & lhs, const ::freyja_msgs::ControllerDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lqr_u == rhs.lqr_u &&
    lhs.thrust == rhs.thrust &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.state_valid == rhs.state_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freyja_msgs::ControllerDebug_<ContainerAllocator1> & lhs, const ::freyja_msgs::ControllerDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freyja_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::ControllerDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::ControllerDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::ControllerDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2232284d6ca530cfbb5e7df4dce8fe0e";
  }

  static const char* value(const ::freyja_msgs::ControllerDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2232284d6ca530cfULL;
  static const uint64_t static_value2 = 0xbb5e7df4dce8fe0eULL;
};

template<class ContainerAllocator>
struct DataType< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freyja_msgs/ControllerDebug";
  }

  static const char* value(const ::freyja_msgs::ControllerDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Debug message from controller.\n"
"# Often useful for observers, lqr_u is the 4-axis acceleration vector.\n"
"# State can be invalid due to time delay, or a dead source.\n"
"\n"
"Header header\n"
"float64[4] lqr_u\n"
"float64 thrust\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"uint8 state_valid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::freyja_msgs::ControllerDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lqr_u);
      stream.next(m.thrust);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.state_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freyja_msgs::ControllerDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freyja_msgs::ControllerDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lqr_u[]" << std::endl;
    for (size_t i = 0; i < v.lqr_u.size(); ++i)
    {
      s << indent << "  lqr_u[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lqr_u[i]);
    }
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "state_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREYJA_MSGS_MESSAGE_CONTROLLERDEBUG_H
