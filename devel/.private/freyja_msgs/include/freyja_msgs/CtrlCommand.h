// Generated by gencpp from file freyja_msgs/CtrlCommand.msg
// DO NOT EDIT!


#ifndef FREYJA_MSGS_MESSAGE_CTRLCOMMAND_H
#define FREYJA_MSGS_MESSAGE_CTRLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace freyja_msgs
{
template <class ContainerAllocator>
struct CtrlCommand_
{
  typedef CtrlCommand_<ContainerAllocator> Type;

  CtrlCommand_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , thrust(0.0)
    , ctrl_mode(0)  {
    }
  CtrlCommand_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , thrust(0.0)
    , ctrl_mode(0)  {
  (void)_alloc;
    }



   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef uint8_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;





  typedef boost::shared_ptr< ::freyja_msgs::CtrlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freyja_msgs::CtrlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct CtrlCommand_

typedef ::freyja_msgs::CtrlCommand_<std::allocator<void> > CtrlCommand;

typedef boost::shared_ptr< ::freyja_msgs::CtrlCommand > CtrlCommandPtr;
typedef boost::shared_ptr< ::freyja_msgs::CtrlCommand const> CtrlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freyja_msgs::CtrlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freyja_msgs::CtrlCommand_<ContainerAllocator1> & lhs, const ::freyja_msgs::CtrlCommand_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.thrust == rhs.thrust &&
    lhs.ctrl_mode == rhs.ctrl_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freyja_msgs::CtrlCommand_<ContainerAllocator1> & lhs, const ::freyja_msgs::CtrlCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freyja_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::CtrlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::CtrlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::CtrlCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bc13e173942b7e37b7a6e38ce8e178c";
  }

  static const char* value(const ::freyja_msgs::CtrlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bc13e173942b7e3ULL;
  static const uint64_t static_value2 = 0x7b7a6e38ce8e178cULL;
};

template<class ContainerAllocator>
struct DataType< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freyja_msgs/CtrlCommand";
  }

  static const char* value(const ::freyja_msgs::CtrlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Control commands for the attitude controller.\n"
"# Need to translate differently for AscTec HLP/LLP, PX4, AC etc.\n"
"# Attitude in radians, thrust in *Newtons*. No scaling!\n"
"# ctrl_mode is:\n"
"#    8 bits (asctec): [ x x gps height thrust yaw roll pitch ]\n"
"#    8 bits (apm)   : [ x x x x x x yawrate ctrlvalid]\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 thrust\n"
"uint8 ctrl_mode\n"
;
  }

  static const char* value(const ::freyja_msgs::CtrlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.thrust);
      stream.next(m.ctrl_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CtrlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freyja_msgs::CtrlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freyja_msgs::CtrlCommand_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "ctrl_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREYJA_MSGS_MESSAGE_CTRLCOMMAND_H
