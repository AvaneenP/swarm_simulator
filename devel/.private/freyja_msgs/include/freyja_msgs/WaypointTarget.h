// Generated by gencpp from file freyja_msgs/WaypointTarget.msg
// DO NOT EDIT!


#ifndef FREYJA_MSGS_MESSAGE_WAYPOINTTARGET_H
#define FREYJA_MSGS_MESSAGE_WAYPOINTTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace freyja_msgs
{
template <class ContainerAllocator>
struct WaypointTarget_
{
  typedef WaypointTarget_<ContainerAllocator> Type;

  WaypointTarget_()
    : header()
    , terminal_pn(0.0)
    , terminal_pe(0.0)
    , terminal_pd(0.0)
    , terminal_vn(0.0)
    , terminal_ve(0.0)
    , terminal_vd(0.0)
    , terminal_yaw(0.0)
    , allocated_time(0.0)
    , translational_speed(0.0)
    , waypoint_mode(0)  {
    }
  WaypointTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , terminal_pn(0.0)
    , terminal_pe(0.0)
    , terminal_pd(0.0)
    , terminal_vn(0.0)
    , terminal_ve(0.0)
    , terminal_vd(0.0)
    , terminal_yaw(0.0)
    , allocated_time(0.0)
    , translational_speed(0.0)
    , waypoint_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _terminal_pn_type;
  _terminal_pn_type terminal_pn;

   typedef double _terminal_pe_type;
  _terminal_pe_type terminal_pe;

   typedef double _terminal_pd_type;
  _terminal_pd_type terminal_pd;

   typedef double _terminal_vn_type;
  _terminal_vn_type terminal_vn;

   typedef double _terminal_ve_type;
  _terminal_ve_type terminal_ve;

   typedef double _terminal_vd_type;
  _terminal_vd_type terminal_vd;

   typedef double _terminal_yaw_type;
  _terminal_yaw_type terminal_yaw;

   typedef float _allocated_time_type;
  _allocated_time_type allocated_time;

   typedef float _translational_speed_type;
  _translational_speed_type translational_speed;

   typedef uint8_t _waypoint_mode_type;
  _waypoint_mode_type waypoint_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TIME)
  #undef TIME
#endif
#if defined(_WIN32) && defined(SPEED)
  #undef SPEED
#endif

  enum {
    TIME = 0u,
    SPEED = 1u,
  };


  typedef boost::shared_ptr< ::freyja_msgs::WaypointTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::freyja_msgs::WaypointTarget_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointTarget_

typedef ::freyja_msgs::WaypointTarget_<std::allocator<void> > WaypointTarget;

typedef boost::shared_ptr< ::freyja_msgs::WaypointTarget > WaypointTargetPtr;
typedef boost::shared_ptr< ::freyja_msgs::WaypointTarget const> WaypointTargetConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::freyja_msgs::WaypointTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::freyja_msgs::WaypointTarget_<ContainerAllocator1> & lhs, const ::freyja_msgs::WaypointTarget_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.terminal_pn == rhs.terminal_pn &&
    lhs.terminal_pe == rhs.terminal_pe &&
    lhs.terminal_pd == rhs.terminal_pd &&
    lhs.terminal_vn == rhs.terminal_vn &&
    lhs.terminal_ve == rhs.terminal_ve &&
    lhs.terminal_vd == rhs.terminal_vd &&
    lhs.terminal_yaw == rhs.terminal_yaw &&
    lhs.allocated_time == rhs.allocated_time &&
    lhs.translational_speed == rhs.translational_speed &&
    lhs.waypoint_mode == rhs.waypoint_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::freyja_msgs::WaypointTarget_<ContainerAllocator1> & lhs, const ::freyja_msgs::WaypointTarget_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace freyja_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::freyja_msgs::WaypointTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::freyja_msgs::WaypointTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::freyja_msgs::WaypointTarget_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a15b2f6401b97924332941dc39790f93";
  }

  static const char* value(const ::freyja_msgs::WaypointTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa15b2f6401b97924ULL;
  static const uint64_t static_value2 = 0x332941dc39790f93ULL;
};

template<class ContainerAllocator>
struct DataType< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "freyja_msgs/WaypointTarget";
  }

  static const char* value(const ::freyja_msgs::WaypointTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Discrete waypoint for a waypoint handler to convert into ReferenceState.\n"
"\n"
"Header header\n"
"float64 terminal_pn\n"
"float64 terminal_pe\n"
"float64 terminal_pd\n"
"float64 terminal_vn\n"
"float64 terminal_ve\n"
"float64 terminal_vd\n"
"float64 terminal_yaw\n"
"\n"
"# time allocated to travel from 'here' to the target\n"
"float32 allocated_time\n"
"# use a constant speed instead of allocated_time(see flag below)\n"
"float32 translational_speed\n"
"\n"
"# use allocated_time OR use translational_speed\n"
"uint8 TIME  = 0\n"
"uint8 SPEED = 1\n"
"uint8 waypoint_mode\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::freyja_msgs::WaypointTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.terminal_pn);
      stream.next(m.terminal_pe);
      stream.next(m.terminal_pd);
      stream.next(m.terminal_vn);
      stream.next(m.terminal_ve);
      stream.next(m.terminal_vd);
      stream.next(m.terminal_yaw);
      stream.next(m.allocated_time);
      stream.next(m.translational_speed);
      stream.next(m.waypoint_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::freyja_msgs::WaypointTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::freyja_msgs::WaypointTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "terminal_pn: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_pn);
    s << indent << "terminal_pe: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_pe);
    s << indent << "terminal_pd: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_pd);
    s << indent << "terminal_vn: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_vn);
    s << indent << "terminal_ve: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_ve);
    s << indent << "terminal_vd: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_vd);
    s << indent << "terminal_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_yaw);
    s << indent << "allocated_time: ";
    Printer<float>::stream(s, indent + "  ", v.allocated_time);
    s << indent << "translational_speed: ";
    Printer<float>::stream(s, indent + "  ", v.translational_speed);
    s << indent << "waypoint_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waypoint_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREYJA_MSGS_MESSAGE_WAYPOINTTARGET_H
