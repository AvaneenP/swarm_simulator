# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from freyja_msgs/CtrlCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CtrlCommand(genpy.Message):
  _md5sum = "3bc13e173942b7e37b7a6e38ce8e178c"
  _type = "freyja_msgs/CtrlCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Control commands for the attitude controller.
# Need to translate differently for AscTec HLP/LLP, PX4, AC etc.
# Attitude in radians, thrust in *Newtons*. No scaling!
# ctrl_mode is:
#    8 bits (asctec): [ x x gps height thrust yaw roll pitch ]
#    8 bits (apm)   : [ x x x x x x yawrate ctrlvalid]
float64 roll
float64 pitch
float64 yaw
float64 thrust
uint8 ctrl_mode
"""
  __slots__ = ['roll','pitch','yaw','thrust','ctrl_mode']
  _slot_types = ['float64','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       roll,pitch,yaw,thrust,ctrl_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CtrlCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.thrust is None:
        self.thrust = 0.
      if self.ctrl_mode is None:
        self.ctrl_mode = 0
    else:
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.thrust = 0.
      self.ctrl_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dB().pack(_x.roll, _x.pitch, _x.yaw, _x.thrust, _x.ctrl_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.roll, _x.pitch, _x.yaw, _x.thrust, _x.ctrl_mode,) = _get_struct_4dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dB().pack(_x.roll, _x.pitch, _x.yaw, _x.thrust, _x.ctrl_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.roll, _x.pitch, _x.yaw, _x.thrust, _x.ctrl_mode,) = _get_struct_4dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dB = None
def _get_struct_4dB():
    global _struct_4dB
    if _struct_4dB is None:
        _struct_4dB = struct.Struct("<4dB")
    return _struct_4dB
