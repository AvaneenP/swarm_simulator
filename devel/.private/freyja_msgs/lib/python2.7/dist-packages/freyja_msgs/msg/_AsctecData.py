# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from freyja_msgs/AsctecData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AsctecData(genpy.Message):
  _md5sum = "8ad7a94e1bacdc1e59233f1b26a5c94c"
  _type = "freyja_msgs/AsctecData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int64 lat
int64 lon
int64 best_lat
int64 best_lon

int64 hgt 
  
int64 sp_x
int64 sp_y
int64 best_sp_x
int64 best_sp_y
int64 best_sp_z
  
int64 heading_angle

int64 pitch_angle
int64 roll_angle
int64 yaw_angle
int64 pitch_anglevel
int64 roll_anglevel
int64 yaw_anglevel

int64 accx
int64 accy
int64 accz

uint8 motor1rpm
uint8 motor2rpm
uint8 motor3rpm
uint8 motor4rpm
uint8 motor5rpm
uint8 motor6rpm

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','lat','lon','best_lat','best_lon','hgt','sp_x','sp_y','best_sp_x','best_sp_y','best_sp_z','heading_angle','pitch_angle','roll_angle','yaw_angle','pitch_anglevel','roll_anglevel','yaw_anglevel','accx','accy','accz','motor1rpm','motor2rpm','motor3rpm','motor4rpm','motor5rpm','motor6rpm']
  _slot_types = ['std_msgs/Header','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lat,lon,best_lat,best_lon,hgt,sp_x,sp_y,best_sp_x,best_sp_y,best_sp_z,heading_angle,pitch_angle,roll_angle,yaw_angle,pitch_anglevel,roll_anglevel,yaw_anglevel,accx,accy,accz,motor1rpm,motor2rpm,motor3rpm,motor4rpm,motor5rpm,motor6rpm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AsctecData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.best_lat is None:
        self.best_lat = 0
      if self.best_lon is None:
        self.best_lon = 0
      if self.hgt is None:
        self.hgt = 0
      if self.sp_x is None:
        self.sp_x = 0
      if self.sp_y is None:
        self.sp_y = 0
      if self.best_sp_x is None:
        self.best_sp_x = 0
      if self.best_sp_y is None:
        self.best_sp_y = 0
      if self.best_sp_z is None:
        self.best_sp_z = 0
      if self.heading_angle is None:
        self.heading_angle = 0
      if self.pitch_angle is None:
        self.pitch_angle = 0
      if self.roll_angle is None:
        self.roll_angle = 0
      if self.yaw_angle is None:
        self.yaw_angle = 0
      if self.pitch_anglevel is None:
        self.pitch_anglevel = 0
      if self.roll_anglevel is None:
        self.roll_anglevel = 0
      if self.yaw_anglevel is None:
        self.yaw_anglevel = 0
      if self.accx is None:
        self.accx = 0
      if self.accy is None:
        self.accy = 0
      if self.accz is None:
        self.accz = 0
      if self.motor1rpm is None:
        self.motor1rpm = 0
      if self.motor2rpm is None:
        self.motor2rpm = 0
      if self.motor3rpm is None:
        self.motor3rpm = 0
      if self.motor4rpm is None:
        self.motor4rpm = 0
      if self.motor5rpm is None:
        self.motor5rpm = 0
      if self.motor6rpm is None:
        self.motor6rpm = 0
    else:
      self.header = std_msgs.msg.Header()
      self.lat = 0
      self.lon = 0
      self.best_lat = 0
      self.best_lon = 0
      self.hgt = 0
      self.sp_x = 0
      self.sp_y = 0
      self.best_sp_x = 0
      self.best_sp_y = 0
      self.best_sp_z = 0
      self.heading_angle = 0
      self.pitch_angle = 0
      self.roll_angle = 0
      self.yaw_angle = 0
      self.pitch_anglevel = 0
      self.roll_anglevel = 0
      self.yaw_anglevel = 0
      self.accx = 0
      self.accy = 0
      self.accz = 0
      self.motor1rpm = 0
      self.motor2rpm = 0
      self.motor3rpm = 0
      self.motor4rpm = 0
      self.motor5rpm = 0
      self.motor6rpm = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20q6B().pack(_x.lat, _x.lon, _x.best_lat, _x.best_lon, _x.hgt, _x.sp_x, _x.sp_y, _x.best_sp_x, _x.best_sp_y, _x.best_sp_z, _x.heading_angle, _x.pitch_angle, _x.roll_angle, _x.yaw_angle, _x.pitch_anglevel, _x.roll_anglevel, _x.yaw_anglevel, _x.accx, _x.accy, _x.accz, _x.motor1rpm, _x.motor2rpm, _x.motor3rpm, _x.motor4rpm, _x.motor5rpm, _x.motor6rpm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 166
      (_x.lat, _x.lon, _x.best_lat, _x.best_lon, _x.hgt, _x.sp_x, _x.sp_y, _x.best_sp_x, _x.best_sp_y, _x.best_sp_z, _x.heading_angle, _x.pitch_angle, _x.roll_angle, _x.yaw_angle, _x.pitch_anglevel, _x.roll_anglevel, _x.yaw_anglevel, _x.accx, _x.accy, _x.accz, _x.motor1rpm, _x.motor2rpm, _x.motor3rpm, _x.motor4rpm, _x.motor5rpm, _x.motor6rpm,) = _get_struct_20q6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20q6B().pack(_x.lat, _x.lon, _x.best_lat, _x.best_lon, _x.hgt, _x.sp_x, _x.sp_y, _x.best_sp_x, _x.best_sp_y, _x.best_sp_z, _x.heading_angle, _x.pitch_angle, _x.roll_angle, _x.yaw_angle, _x.pitch_anglevel, _x.roll_anglevel, _x.yaw_anglevel, _x.accx, _x.accy, _x.accz, _x.motor1rpm, _x.motor2rpm, _x.motor3rpm, _x.motor4rpm, _x.motor5rpm, _x.motor6rpm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 166
      (_x.lat, _x.lon, _x.best_lat, _x.best_lon, _x.hgt, _x.sp_x, _x.sp_y, _x.best_sp_x, _x.best_sp_y, _x.best_sp_z, _x.heading_angle, _x.pitch_angle, _x.roll_angle, _x.yaw_angle, _x.pitch_anglevel, _x.roll_anglevel, _x.yaw_anglevel, _x.accx, _x.accy, _x.accz, _x.motor1rpm, _x.motor2rpm, _x.motor3rpm, _x.motor4rpm, _x.motor5rpm, _x.motor6rpm,) = _get_struct_20q6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20q6B = None
def _get_struct_20q6B():
    global _struct_20q6B
    if _struct_20q6B is None:
        _struct_20q6B = struct.Struct("<20q6B")
    return _struct_20q6B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
